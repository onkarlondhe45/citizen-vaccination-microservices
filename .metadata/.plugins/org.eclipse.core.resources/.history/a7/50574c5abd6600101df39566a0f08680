package com.vaccinationcenter.service;

import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.vaccinationcenter.exception.ResourceNotFoundException;
import com.vaccinationcenter.model.Citizen;
import com.vaccinationcenter.model.ResponseDto;
import com.vaccinationcenter.model.VaccinationCenter;
import com.vaccinationcenter.repository.VaccinationCenterRepository;

@Service
public class VaccinationCenterService {

	private final VaccinationCenterRepository vaccinationCenterRepository;

	private final RestTemplate restTemplate;
	
	private final CircuitBreakerFactory<?, ?> circuitBreakerFactory;
	
	private static final Logger log = LoggerFactory.getLogger(VaccinationCenterService.class);


	public VaccinationCenterService(VaccinationCenterRepository vaccinationCenterRepository,
			RestTemplate restTemplate, CircuitBreakerFactory<?, ?> circuitBreakerFactory) {
		this.vaccinationCenterRepository = vaccinationCenterRepository;
		this.restTemplate = restTemplate;
		this.circuitBreakerFactory=circuitBreakerFactory;
	}

	public VaccinationCenter createVaccinationCenter(VaccinationCenter vaccinationCenter) {
		VaccinationCenter center = vaccinationCenterRepository.save(vaccinationCenter);
		return center;
	}

	public ResponseDto getDetailsByVaccinationCenterId(int id) {

		VaccinationCenter vaccinationCenter = vaccinationCenterRepository.findById(id).orElseThrow(
				() -> new ResourceNotFoundException("Vaccination center details not found with id : " + id));
		
		CircuitBreaker circuitBreaker = circuitBreakerFactory.create("citizenService");

		Citizen citizen = circuitBreaker.run(
				() -> restTemplate.getForObject("http://localhost:9090/api/citizens/id/" + id, Citizen.class),
				throwable -> {
					log.warn("Fallback triggered: Citizen service is down", throwable.getMessage());
					return null;
				});

		return ResponseDto.builder().citizens(Collections.singletonList(citizen)).vaccinationCenter(vaccinationCenter)
				.build();
	}

}
